const path = require("path");
const snarkjs = require("snarkjs");
const compiler = require("circom");
const chai = require("chai");
const assert = chai.assert;

export {};

describe("Census test", function () {
    this.timeout(200000);

    it("Test Census 3lvl 1+0 claims", async () => {
        const compiledCircuit = await compiler(
            path.join(__dirname, "circuits", "census4lvl.circom"),
            { reduceConstraints: false }
        );
        const circuit = new snarkjs.Circuit(compiledCircuit);

        const witness = circuit.calculateWitness({
            censusRoot: "4074497308463476136201285152824099516838013645146156789634782312073978491109",
            censusSiblings: ["0","0","0","0"],
            privateKey: "6190793965647866647574058687473278714480561351424348391693421151024369116465",
            voteSigS: "2209631892358909859397227882534860536786213289219644305743688183951383321555",
            voteSigR8x: "8553678144208642175027223770335048072652078621216414881653012537434846327449",
            voteSigR8y: "5507837342589329113352496188906367161790372084365285966741761856353367255709",
            voteValue: "1",
            electionId: "10",
            nullifier: "5482502190698122543507050012922267324433666089315343653961928581094977573855",
            relayerPublicKey: "100",
            relayerProof: "5310453724638211502974974048672254152837836404760801353912687712949736620975",
        });
        assert(circuit.checkWitness(witness));
    });

    it("Test Census 10lvl 1+10 claims", async () => {
        const compiledCircuit = await compiler(
            path.join(__dirname, "circuits", "census10lvl.circom"),
            { reduceConstraints: false }
        );
        const circuit = new snarkjs.Circuit(compiledCircuit);

        const witness = circuit.calculateWitness({
            censusRoot: "7057790090482703671920908448706896662774043259825803524135137635563817066408",
            censusSiblings: ["604188087829632076306376825067769041242138923320155729340326180965998292587","12153545392889497213925826591497721545063714183290024072526018314743912866590","0","7572916773831436189814997554117274995964936990240576236866878478083000163466","0","13626768404149943636805064220376421648463522999893426597789153336042559348372","0","0","0","0"],
            privateKey: "6190793965647866647574058687473278714480561351424348391693421151024369116465",
            voteSigS: "2209631892358909859397227882534860536786213289219644305743688183951383321555",
            voteSigR8x: "8553678144208642175027223770335048072652078621216414881653012537434846327449",
            voteSigR8y: "5507837342589329113352496188906367161790372084365285966741761856353367255709",
            voteValue: "1",
            electionId: "10",
            nullifier: "5482502190698122543507050012922267324433666089315343653961928581094977573855",
            relayerPublicKey: "100",
            relayerProof: "5310453724638211502974974048672254152837836404760801353912687712949736620975",
        });
        assert(circuit.checkWitness(witness));
    });

    it("Test Census 20lvl 1+100 claims", async () => {
        const compiledCircuit = await compiler(
            path.join(__dirname, "circuits", "census20lvl.circom"),
            { reduceConstraints: false }
        );
        const circuit = new snarkjs.Circuit(compiledCircuit);

        const witness = circuit.calculateWitness({
            censusRoot: "15368397647249271934508506432233845532306483980612097086008504067881288898154",
            censusSiblings: ["675584508840681832835455623577625656572699108046037849790665345126900284333","8183129512293188164676055250515333777458525067526620659876655855783287951723","21690800062307710505638759948104971794174735771801044203588845263045627526094","7628037367047386528629736465555584224188189331279023205557610840154681668201","3323874208732977438426799275286695930589926271304687862630328085655408451321","4614993989033145384341257295961126421263546085090619434319621364658918927252","8673882366315854419009753130574392993876925404819710954177121337135854974866","14303518458415221751708520686938864966492174212171872443782171975321658227509","2110364622900290441368559453625737680447585074440868855481108215745481430763","0","10854199324209599062411891562889112882656116425851651300978791986265457932083","0","0","0","0","0","0","0","0","0"],
            privateKey: "6190793965647866647574058687473278714480561351424348391693421151024369116465",
            voteSigS: "2209631892358909859397227882534860536786213289219644305743688183951383321555",
            voteSigR8x: "8553678144208642175027223770335048072652078621216414881653012537434846327449",
            voteSigR8y: "5507837342589329113352496188906367161790372084365285966741761856353367255709",
            voteValue: "1",
            electionId: "10",
            nullifier: "5482502190698122543507050012922267324433666089315343653961928581094977573855",
            relayerPublicKey: "100",
            relayerProof: "5310453724638211502974974048672254152837836404760801353912687712949736620975",
        });
        assert(circuit.checkWitness(witness));
    });
});
